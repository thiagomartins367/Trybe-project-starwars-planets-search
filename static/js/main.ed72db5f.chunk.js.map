{"version":3,"sources":["Context/Context.js","Components/ActiveFilters.js","Components/LabelAndInput.js","Components/LabelAndRadioButtons.js","Components/LabelAndSelect.js","Components/Table.js","services/FetchApi.js","Context/ContextProvider.js","App.js","index.js"],"names":["Context","createContext","ActiveFilters","filters","filtersDataTestIds","classNameFilter","setIdFilterToBeDeleted","className","map","filter","index","id","columnFilter","comparisonFilter","valueFilter","nameFilter","key","length","data-testid","type","onClick","defaultProps","LabelAndInput","labelContent","inputType","inputId","inputValue","onChangeEvent","classNameComponent","dataTestId","htmlFor","value","onChange","LabelAndRadioButtons","nameInputs","inputsContents","onClickEvent","inputsDataTestIds","content","name","LabelAndSelect","selectId","optionsContent","selectDataTestId","element","Table","useContext","filteredPlanets","setFilterByName","columnFilterOptions","optionsForFilters","editableColumnFilterOptions","comparisonFilterOptions","setFilterByNumericValues","stateFilterByNumericValue","createdFilter","filterByNumericValues","filterByName","stateFilterByName","setTableSort","trColor","target","prevState","toLowerCase","Number","order","column","sort","activeSorting","planet","style","backgroundColor","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","url","href","created","edited","FetchApi","a","fetch","promise","json","data","console","log","ContextProvider","children","useState","planets","setPlanets","setFilteredPlanets","setcolumnFilterOptions","setOptionsForFilters","idFilterToBeDeleted","tableSort","useEffect","then","dataResults","results","concat","b","localeCompare","planetsFilteredByName","includes","editableFilteredPlanets","filteredColumnFilterOptions","forEach","filterParam","sortByTableColumn","tableColumnValues","push","highestValueInArray","Math","max","smallestValueInArray","min","elementA","elementB","elementAValue","searchOrdenation","context","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed72db5f.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst Context = createContext();\n\nexport default Context;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ActiveFilters = ({\n  filters,\n  filtersDataTestIds,\n  classNameFilter,\n  setIdFilterToBeDeleted,\n}) => (\n  <section className=\"section-active-filters\">\n    {filters.map((filter, index) => {\n      const { id, columnFilter, comparisonFilter, valueFilter } = filter;\n      const nameFilter = `${columnFilter} ${comparisonFilter} ${valueFilter}`;\n      return (\n        <div\n          key={ `${nameFilter}-${id}` }\n          className={\n            classNameFilter.length === filters.length\n              ? classNameFilter[index]\n              : classNameFilter[0]\n          }\n          data-testid={\n            filtersDataTestIds.length === filters.length\n              ? filtersDataTestIds[index]\n              : filtersDataTestIds[0]\n          }\n        >\n          <span>{ nameFilter }</span>\n          <button type=\"button\" onClick={ () => setIdFilterToBeDeleted(id) }>x</button>\n        </div>\n      );\n    })}\n  </section>\n);\n\nActiveFilters.propTypes = {\n  filters: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    columnFilter: PropTypes.string,\n    comparisonFilter: PropTypes.string,\n    valueFilter: PropTypes.number,\n  })).isRequired,\n  filtersDataTestIds: PropTypes.arrayOf(PropTypes.string),\n  classNameFilter: PropTypes.arrayOf(PropTypes.string),\n  setIdFilterToBeDeleted: PropTypes.func.isRequired,\n};\n\nActiveFilters.defaultProps = {\n  filtersDataTestIds: [],\n  classNameFilter: [],\n};\n\nexport default ActiveFilters;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelAndInput = ({\n  labelContent,\n  inputType,\n  inputId,\n  inputValue,\n  onChangeEvent,\n  classNameComponent,\n  dataTestId,\n}) => (\n  <div className={ classNameComponent }>\n    <label htmlFor={ inputId }>{ labelContent }</label>\n    <br />\n    <input\n      type={ inputType }\n      id={ inputId }\n      value={ inputValue }\n      onChange={ onChangeEvent }\n      data-testid={ dataTestId }\n    />\n  </div>\n);\n\nLabelAndInput.propTypes = {\n  labelContent: PropTypes.string.isRequired,\n  inputType: PropTypes.string.isRequired,\n  inputId: PropTypes.string.isRequired,\n  inputValue: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.string,\n  ]).isRequired,\n  onChangeEvent: PropTypes.func,\n  classNameComponent: PropTypes.string,\n  dataTestId: PropTypes.string,\n};\n\nLabelAndInput.defaultProps = {\n  onChangeEvent: () => '',\n  classNameComponent: '',\n  dataTestId: '',\n};\n\nexport default LabelAndInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelAndRadioButtons = ({\n  nameInputs,\n  inputsContents,\n  onClickEvent,\n  inputsDataTestIds,\n}) => (\n  <div>\n    <label htmlFor={ nameInputs }>\n      {inputsContents.map((content, index) => (\n        <div key={ content }>\n          <input\n            type=\"radio\"\n            name={ nameInputs }\n            value={ content }\n            onClick={ onClickEvent }\n            data-testid={ inputsDataTestIds[index] }\n          />\n          { content }\n          <br />\n        </div>\n      ))}\n    </label>\n  </div>\n);\n\nLabelAndRadioButtons.propTypes = {\n  nameInputs: PropTypes.string.isRequired,\n  inputsContents: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onClickEvent: PropTypes.func,\n  inputsDataTestIds: PropTypes.arrayOf(PropTypes.string),\n};\n\nLabelAndRadioButtons.defaultProps = {\n  onClickEvent: () => '',\n  inputsDataTestIds: [],\n};\n\nexport default LabelAndRadioButtons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LabelAndSelect = ({\n  labelContent,\n  selectId,\n  onChangeEvent,\n  optionsContent,\n  classNameComponent,\n  selectDataTestId,\n}) => (\n  <div className={ classNameComponent }>\n    <label htmlFor={ selectId }>{ labelContent }</label>\n    <br />\n    <select id={ selectId } onChange={ onChangeEvent } data-testid={ selectDataTestId }>\n      {\n        optionsContent.map((element) => (\n          <option key={ element }>{ element }</option>\n        ))\n      }\n    </select>\n  </div>\n);\n\nLabelAndSelect.propTypes = {\n  labelContent: PropTypes.string.isRequired,\n  selectId: PropTypes.string.isRequired,\n  onChangeEvent: PropTypes.func,\n  optionsContent: PropTypes.arrayOf(PropTypes.string).isRequired,\n  classNameComponent: PropTypes.string,\n  selectDataTestId: PropTypes.string,\n};\n\nLabelAndSelect.defaultProps = {\n  onChangeEvent: () => '',\n  classNameComponent: '',\n  selectDataTestId: '',\n};\n\nexport default LabelAndSelect;\n","import React, { useContext } from 'react';\nimport Context from '../Context/Context';\nimport ActiveFilters from './ActiveFilters';\nimport LabelAndInput from './LabelAndInput';\nimport LabelAndRadioButtons from './LabelAndRadioButtons';\nimport LabelAndSelect from './LabelAndSelect';\n\nconst Table = () => {\n  const {\n    filteredPlanets,\n    setFilterByName,\n    columnFilterOptions,\n    optionsForFilters: {\n      editableColumnFilterOptions,\n      comparisonFilterOptions,\n    },\n    setFilterByNumericValues,\n    stateFilterByNumericValue: { createdFilter, filterByNumericValues },\n    stateFilterByName: { filterByName },\n    setIdFilterToBeDeleted,\n    setTableSort,\n  } = useContext(Context);\n  let trColor = false;\n  const alternatingColors = () => {\n    trColor = !trColor;\n    return trColor;\n  };\n  return (\n    <section>\n      <section className=\"section-filters\">\n        <LabelAndInput\n          labelContent=\"Nome Planeta\"\n          inputType=\"text\"\n          inputId=\"name-filter\"\n          inputValue={ filterByName.name }\n          classNameComponent=\"component-name-filter\"\n          onChangeEvent={ ({ target: { value } }) => {\n            setFilterByName((prevState) => ({\n              ...prevState,\n              filterByName: { name: value.toLowerCase() },\n            }));\n          } }\n          dataTestId=\"name-filter\"\n        />\n        <LabelAndSelect\n          labelContent=\"Coluna\"\n          selectId=\"column-filter\"\n          classNameComponent=\"component-column-filter\"\n          onChangeEvent={ ({ target: { value } }) => {\n            setFilterByNumericValues((prevState) => ({\n              ...prevState,\n              createdFilter: {\n                ...prevState.createdFilter,\n                columnFilter: value,\n              },\n            }));\n          } }\n          optionsContent={ editableColumnFilterOptions }\n          selectDataTestId=\"column-filter\"\n        />\n        <LabelAndSelect\n          labelContent=\"Operador\"\n          selectId=\"comparison-filter\"\n          classNameComponent=\"component-comparison-filter\"\n          onChangeEvent={ ({ target: { value } }) => {\n            setFilterByNumericValues((prevState) => ({\n              ...prevState,\n              createdFilter: {\n                ...prevState.createdFilter,\n                comparisonFilter: value,\n              },\n            }));\n          } }\n          optionsContent={ comparisonFilterOptions }\n          selectDataTestId=\"comparison-filter\"\n        />\n        <LabelAndInput\n          labelContent=\"Valor para o Operador\"\n          inputType=\"number\"\n          inputId=\"value-filter\"\n          inputValue={ createdFilter.valueFilter }\n          classNameComponent=\"component-value-filter\"\n          onChangeEvent={ ({ target: { value } }) => {\n            setFilterByNumericValues((prevState) => ({\n              ...prevState,\n              createdFilter: {\n                ...prevState.createdFilter,\n                valueFilter: Number(value),\n              },\n            }));\n          } }\n          dataTestId=\"value-filter\"\n        />\n        <button\n          type=\"button\"\n          onClick={ () => {\n            setFilterByNumericValues((prevState) => ({\n              ...prevState,\n              createdFilter: {\n                ...prevState.createdFilter,\n                id: prevState.createdFilter.id + 1,\n              },\n            }));\n            setFilterByNumericValues((prevState) => ({\n              ...prevState,\n              filterByNumericValues: [\n                ...prevState.filterByNumericValues,\n                {\n                  ...createdFilter,\n                  id: createdFilter.id + 1,\n                },\n              ],\n            }));\n          } }\n          data-testid=\"button-filter\"\n        >\n          Filtrar\n        </button>\n      </section>\n      <br />\n      <section>\n        <LabelAndSelect\n          labelContent=\"Ordenar por: \"\n          selectId=\"column-sort\"\n          onChangeEvent={ ({ target: { value } }) => {\n            setTableSort((prevState) => ({\n              ...prevState,\n              order: {\n                ...prevState.order,\n                column: value,\n              },\n            }));\n          } }\n          optionsContent={ columnFilterOptions }\n          selectDataTestId=\"column-sort\"\n        />\n        <br />\n        <LabelAndRadioButtons\n          nameInputs=\"nameInput\"\n          inputsContents={ ['Ascendente', 'Descendente'] }\n          onClickEvent={ ({ target: { value } }) => {\n            // console.log('radioButtonValue: ', value);\n            setTableSort((prevState) => ({\n              ...prevState,\n              order: {\n                ...prevState.order,\n                sort: value === 'Ascendente' ? 'ASC' : 'DESC',\n              },\n            }));\n          } }\n          inputsDataTestIds={ ['column-sort-input-asc', 'column-sort-input-desc'] }\n        />\n        <button\n          type=\"button\"\n          onClick={ () => {\n            setTableSort((prevState) => ({\n              ...prevState,\n              activeSorting: true,\n            }));\n          } }\n          data-testid=\"column-sort-button\"\n        >\n          ORDENAR\n        </button>\n      </section>\n      <br />\n      <ActiveFilters\n        filters={ filterByNumericValues }\n        filtersDataTestIds={ ['filter'] }\n        classNameFilter={ ['filter'] }\n        setIdFilterToBeDeleted={ setIdFilterToBeDeleted }\n      />\n      <br />\n      <button\n        type=\"button\"\n        onClick={ () => {\n          setFilterByNumericValues((prevState) => ({\n            ...prevState,\n            filterByNumericValues: [],\n          }));\n        } }\n        data-testid=\"button-remove-filters\"\n      >\n        REMOVER FILTROS\n      </button>\n      <br />\n      <br />\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Rotation Period</th>\n            <th>Orbital Period</th>\n            <th>Diameter</th>\n            <th>Climate</th>\n            <th>Gravity</th>\n            <th>Terrain</th>\n            <th>Surface Water</th>\n            <th>Population</th>\n            <th>Films</th>\n            <th>Created</th>\n            <th>Edited</th>\n            <th>URL</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredPlanets.map((planet) => (\n            <tr\n              key={ planet.name }\n              style={ {\n                backgroundColor: alternatingColors()\n                  ? 'rgb(192, 192, 192)'\n                  : 'wite',\n              } }\n            >\n              <td className=\"td\" data-testid=\"planet-name\">\n                { planet.name }\n              </td>\n              <td className=\"td\">{ planet.rotation_period }</td>\n              <td className=\"td\">{ planet.orbital_period }</td>\n              <td className=\"td\">{ planet.diameter }</td>\n              <td className=\"td\">{ planet.climate }</td>\n              <td className=\"td\">{ planet.gravity }</td>\n              <td className=\"td\">{ planet.terrain }</td>\n              <td className=\"td\">{ planet.surface_water }</td>\n              <td className=\"td\">{ planet.population }</td>\n              <td className=\"td-films\">\n                {planet.films.map((url) => (\n                  <span key={ url }>\n                    <a href={ url }>{url }</a>\n                  </span>\n                ))}\n              </td>\n              <td className=\"td\">{ planet.created }</td>\n              <td className=\"td\">{ planet.edited }</td>\n              <td className=\"td-planetUrl\">\n                <a href={ planet.url }>{ planet.url }</a>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </section>\n  );\n};\n\nexport default Table;\n","const FetchApi = async (url) => {\n  try {\n    const promise = await fetch(url);\n    const data = await promise.json();\n    return data;\n  } catch (error) {\n    console.log('API REQUEST ERROR: ', error);\n  }\n};\n\nexport default FetchApi;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport FetchApi from '../services/FetchApi';\nimport Context from './Context';\n\nconst ContextProvider = ({ children }) => {\n  const [planets, setPlanets] = useState([]);\n  const [filteredPlanets, setFilteredPlanets] = useState([]);\n  const [columnFilterOptions, setcolumnFilterOptions] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ]);\n  const [optionsForFilters, setOptionsForFilters] = useState({\n    editableColumnFilterOptions: [\n      'population',\n      'orbital_period',\n      'diameter',\n      'rotation_period',\n      'surface_water',\n    ],\n    comparisonFilterOptions: [\n      'maior que',\n      'menor que',\n      'igual a',\n    ],\n  });\n  const [stateFilterByName, setFilterByName] = useState({\n    filterByName: {\n      name: '',\n    },\n  });\n\n  const [stateFilterByNumericValue, setFilterByNumericValues] = useState({\n    createdFilter: {\n      id: 0,\n      columnFilter: 'population',\n      comparisonFilter: 'maior que',\n      valueFilter: 0,\n    },\n    filterByNumericValues: [],\n  });\n\n  const [idFilterToBeDeleted, setIdFilterToBeDeleted] = useState(0);\n\n  const [tableSort, setTableSort] = useState({\n    activeSorting: false,\n    order: {\n      column: 'population',\n      sort: 'ASC',\n    },\n  });\n\n  useEffect(() => {\n    FetchApi('https://swapi.dev/api/planets/')\n      .then((data) => {\n        const dataResults = data.results.concat();\n        dataResults.sort((a, b) => a.name.localeCompare(b.name)); // <--- | Essa linha de código foi retirada do stack overflow.\n        setPlanets(dataResults); // Link stack overflow: https://pt.stackoverflow.com/questions/46600/como-ordenar-uma-array-de-objetos-com-array-sort\n        setFilteredPlanets(dataResults);\n        // console.log('dataResults: ', dataResults);\n      });\n  }, []);\n\n  useEffect(() => {\n    const { filterByName } = stateFilterByName;\n    if (filterByName.name !== '') {\n      const planetsFilteredByName = planets.filter((planet) => {\n        const planetName = planet.name.toLowerCase();\n        // console.log('name-Planet: ', planetName);\n        return planetName.includes(filterByName.name);\n      });\n      // console.log('planetsFilteredByName: ', planetsFilteredByName);\n      setFilteredPlanets(planetsFilteredByName);\n    } else {\n      setFilteredPlanets(planets);\n    }\n  }, [stateFilterByName, planets]);\n\n  useEffect(() => {\n    const { filterByNumericValues } = stateFilterByNumericValue;\n    if (filterByNumericValues.length > 0) {\n      let editableFilteredPlanets = planets;\n      let filteredColumnFilterOptions = columnFilterOptions.concat();\n      filterByNumericValues.forEach((filters) => {\n        const { columnFilter, comparisonFilter, valueFilter } = filters;\n        switch (comparisonFilter) {\n        case 'maior que':\n          editableFilteredPlanets = editableFilteredPlanets.filter(\n            (planet) => planet[columnFilter] > valueFilter,\n          );\n          break;\n        case 'menor que':\n          editableFilteredPlanets = editableFilteredPlanets.filter(\n            (planet) => planet[columnFilter] < valueFilter,\n          );\n          break;\n        case 'igual a':\n          editableFilteredPlanets = editableFilteredPlanets.filter(\n            (planet) => Number(planet[columnFilter]) === valueFilter,\n          );\n          break;\n        default:\n          break;\n        }\n        filteredColumnFilterOptions = filteredColumnFilterOptions.filter(\n          (filterParam) => filterParam !== columnFilter,\n        );\n      });\n      setOptionsForFilters((prevState) => ({\n        ...prevState,\n        editableColumnFilterOptions: filteredColumnFilterOptions,\n      }));\n      setFilteredPlanets(editableFilteredPlanets);\n    } else {\n      setFilteredPlanets(planets);\n      setOptionsForFilters((prevState) => ({\n        ...prevState,\n        editableColumnFilterOptions: columnFilterOptions,\n      }));\n    }\n    if (idFilterToBeDeleted !== 0) {\n      setFilterByNumericValues((prevState) => ({\n        ...prevState,\n        filterByNumericValues: filterByNumericValues.filter(\n          (filter) => filter.id !== idFilterToBeDeleted,\n        ),\n      }));\n      setIdFilterToBeDeleted(0);\n    }\n  }, [stateFilterByNumericValue, planets, idFilterToBeDeleted, columnFilterOptions]);\n\n  const searchOrdenation = ({\n    sortByTableColumn,\n    column,\n    sort,\n    highestValueInArray,\n    smallestValueInArray,\n  }) => {\n    switch (sort) {\n    case 'ASC':\n      sortByTableColumn.sort((elementA, elementB) => {\n        const elementAValue = elementA[column] !== 'unknown'\n          ? elementA[column]\n          : highestValueInArray;\n        const elementBValue = elementB[column] !== 'unknown'\n          ? elementB[column]\n          : highestValueInArray;\n        return elementAValue - elementBValue;\n      });\n      break;\n    case 'DESC':\n      sortByTableColumn.sort((elementA, elementB) => {\n        const elementAValue = elementA[column] !== 'unknown'\n          ? elementA[column]\n          : smallestValueInArray;\n        const elementBValue = elementB[column] !== 'unknown'\n          ? elementB[column]\n          : smallestValueInArray;\n        return elementBValue - elementAValue;\n      });\n      break;\n    default:\n      break;\n    }\n    return sortByTableColumn;\n  };\n\n  useEffect(() => {\n    const { activeSorting, order: { column, sort } } = tableSort;\n    if (activeSorting) {\n      let sortByTableColumn = filteredPlanets.concat();\n      const tableColumnValues = [];\n      sortByTableColumn.forEach((planet) => {\n        if (planet[column] !== 'unknown') {\n          tableColumnValues.push(Number(planet[column]));\n        }\n      });\n      const highestValueInArray = Math.max(...tableColumnValues) + 1;\n      const smallestValueInArray = Math.min(...tableColumnValues) - 1;\n      const paramForSearchOrdenation = {\n        sortByTableColumn,\n        column,\n        sort,\n        highestValueInArray,\n        smallestValueInArray,\n      };\n      sortByTableColumn = searchOrdenation(paramForSearchOrdenation);\n      setFilteredPlanets(sortByTableColumn);\n      setTableSort((prevState) => ({\n        ...prevState,\n        activeSorting: false,\n      }));\n    }\n  }, [tableSort, filteredPlanets]);\n\n  const context = {\n    data: planets,\n    setPlanets,\n    filteredPlanets,\n    setFilteredPlanets,\n    stateFilterByName,\n    setFilterByName,\n    columnFilterOptions,\n    setcolumnFilterOptions,\n    optionsForFilters,\n    setOptionsForFilters,\n    stateFilterByNumericValue,\n    setFilterByNumericValues,\n    idFilterToBeDeleted,\n    setIdFilterToBeDeleted,\n    tableSort,\n    setTableSort,\n  };\n  return (\n    <Context.Provider value={ context }>\n      { children }\n    </Context.Provider>\n  );\n};\n\nContextProvider.propTypes = {\n  children: PropTypes.element,\n};\n\nContextProvider.defaultProps = {\n  children: <>default</>,\n};\n\nexport default ContextProvider;\n","import React from 'react';\nimport './App.css';\nimport Table from './Components/Table';\nimport ContextProvider from './Context/ContextProvider';\n\nfunction App() {\n  return (\n    <ContextProvider>\n      <Table />\n    </ContextProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}